import sys
from datetime import datetime
import gc

class Node:
	def __init__(self, state, position, move, g, parent, depth, f):
		self.state = state
		self.position = position # where the 0 is
		self.move = move
		self.g = g
		self.parent = parent
		self.depth = depth
		self.f = f

def readstartFile(startFile):
	state = []
	with open(startFile) as startFile:
		while True:
			line = startFile.readline().strip()
			if line == "END OF FILE":
				break;
			line = line.split()
			row = list(map(int, line))
			state.append(row)
	return state

def makeIndent(level):
	indent = "\t"
	for i in range(level-1):
		indent += "\t"
	return indent

def fileWriteNode(file, node, level, searchMethod):
	indent = makeIndent(level)
	file.write(indent+"<\n")
	file.write(indent+"\tstate =\n")
	for row in node.state:
		file.write(indent+"\t\t"+str(row)+"\n")
	if node.move[0] == 0:
		file.write(indent+"\taction = Start\n")
	else:
		file.write(indent+"\taction = Move "+str(node.move[0])+" "+node.move[1]+"\n")
	file.write(indent+"\tg(n) = "+str(node.g)+"\n")
	if searchMethod == "dls" or searchMethod == "ids":
		file.write(indent+"\tdepth = "+str(node.depth)+"\n")
	elif searchMethod == "greedy" or searchMethod == "a*":
		file.write(indent+"\tf(n) = "+str(node.f)+"\n")
	file.write(indent+"\tparent = ")
	if node.parent != None:
		file.write("\n")
		fileWriteNode(file, node.parent, level+2, searchMethod)
	else:
		file.write("None\n")
	file.write(indent+">\n")

def fileWritePoppedNode(file, node, level, nodesPopped, searchMethod):
	file.write("Popped node #"+str(nodesPopped)+":\n")
	fileWriteNode(file, node, level, searchMethod)

def fileWriteClosedFringe(file, closed, fringe, numNewNodes, searchMethod):
	file.write("\t"+str(numNewNodes)+" successors generated"+"\n")
	file.write("\tClosed:\n")
	for state in closed:
		for row in state:
			file.write("\t\t"+str(row)+"\n")
		file.write("\n")
	file.write("\tFringe:\n")
	for node in fringe:
		fileWriteNode(file, node, 2, searchMethod)

def fileWriteSolution(file, nodesPopped, nodesExpanded, nodesGenerated, maxFringeSize):
	file.write("\nNodes Popped: "+str(nodesPopped)+"\n")
	file.write("Nodes Expanded: "+str(nodesExpanded)+"\n")
	file.write("Nodes Generated: "+str(nodesGenerated)+"\n")
	file.write("Max Fringe Size: "+str(maxFringeSize)+"\n")

def getSolutionPath(node):
	path = []
	cost = 0
	while node.parent != None:
		path.append(node)
		cost += node.move[0]
		node = node.parent
	path.reverse()
	return (path, cost)

def printSolution(nodesPopped, nodesExpanded, nodesGenerated, maxFringeSize, cost, solutionPath):
	print("Nodes Popped:", nodesPopped)
	print("Nodes Expanded:", nodesExpanded)
	print("Nodes Generated:", nodesGenerated)
	print("Max Fringe Size:", maxFringeSize)
	print("Solution Found at depth", len(solutionPath), "with cost of", cost)
	print("Steps:")
	for node in solutionPath:
		print("\tMove", node.move[0], node.move[1])

def defineGoalLocations(goalState): 
	goalLocations = {
			0: None,
			1: None,
			2: None,
			3: None,
			4: None,
			5: None,
			6: None,
			7: None,
			8: None
	}
	count = 0
	for row in range(len(goalState)):
		for col in range(len(goalState)):
			goalLocations[goalState[row][col]] = [row, col, count]
			count += 1
	return goalLocations

def heuristic(node, searchMethod, goalLocations):
	manhattan = 0
	for row in range(len(node.state)):
		for col in range(len(node.state[0])):
			manhattan += abs(goalLocations[node.state[row][col]][0] - row) * node.state[row][col]
			manhattan += abs(goalLocations[node.state[row][col]][1] - col) * node.state[row][col]	
	return manhattan

def makeStartNode(startState, searchMethod, goalLocations):
	startNode = None
	for row in range(len(startState)):
		for col in range(len(startState[0])):
			if startState[row][col] == 0:
				startNode = Node(startState, (row, col), (0, "start"), 0, None, 0, 0)
				if searchMethod == "greedy" or searchMethod == "a*":
					heuristicValue = heuristic(startNode, searchMethod, goalLocations)
					startNode.f = heuristicValue
					if searchMethod == "a*":
						startNode.f += startNode.g
				break
	return startNode

def search(startState, goalState, searchMethod, limit, dumpFlag, file):
	if dumpFlag:
		file.write("Running "+searchMethod+"\n")
	goalLocations = defineGoalLocations(goalState)
	startNode = makeStartNode(startState, searchMethod, goalLocations)
	nodesGenerated = 1
	currFringeSize = 0	
	maxFringeSize = 0
	nodesPopped = 0
	nodesExpanded = 0
	limit = 0
	if searchMethod == "dls":
		limit = int(start("Enter the depth limit:"))
		if dumpFlag:
			file.write("Depth Limit Entered = "+str(limit)+"\n")
	solutionFound = searchHelper(startNode, goalState, searchMethod, nodesPopped, nodesExpanded, nodesGenerated, maxFringeSize, limit, goalLocations, dumpFlag, file)
	return solutionFound

def searchHelper(startNode, goalState, searchMethod, nodesPopped, nodesExpanded, nodesGenerated, maxFringeSize, limit, goalLocations, dumpFlag, file):
	closed = []
	fringe = []
	fringe.append(startNode)
	currFringeSize = 1
	maxFringeSize = 1

	while fringe:
		# pop node from fringe
		if searchMethod == "dfs" or searchMethod == "dls" or searchMethod == "ids":
			node = fringe.pop()
		else:
			node = fringe.pop(0)
		nodesPopped += 1
		if dumpFlag:
			fileWritePoppedNode(file, node, 1, nodesPopped, searchMethod)

		# check if reach goal state
		if node.state == goalState:
			(solutionPath, cost) = getSolutionPath(node)
			printSolution(nodesPopped, nodesExpanded, nodesGenerated, maxFringeSize, cost, solutionPath)
			if dumpFlag:
				fileWriteSolution(file, nodesPopped, nodesExpanded, nodesGenerated, maxFringeSize)
			return (solutionPath, cost)

		# determine whether to expand node
		toBeExpanded = False
		if searchMethod == "dls" and (node.state, node.depth) not in closed and node.depth != limit:
			closed.append((node.state, node.depth))
			toBeExpanded = True
		elif searchMethod != "dls" and node.state not in closed and not(searchMethod == "ids" and node.depth == limit):
			closed.append(node.state)
			toBeExpanded = True

		# expand node
		if toBeExpanded:
			newNodes = expand(node, searchMethod, goalLocations)
			fringe += newNodes
			if searchMethod == "ucs":
				fringe.sort(key=lambda node: node.g)
			if searchMethod == "greedy" or searchMethod == "a*":
				fringe.sort(key=lambda node: node.f)
			if dumpFlag:
				fileWriteClosedFringe(file, closed, fringe, len(newNodes), searchMethod)
			nodesExpanded += 1
			nodesGenerated += len(newNodes)
			currFringeSize = len(fringe)
			maxFringeSize = max(currFringeSize, maxFringeSize)

	# if fringe is empty
	if searchMethod == "dls":
		print("nodesGenerated = ", nodesGenerated)
		print("fringe = ", fringe)
		print("Depth limit reached. Search failed.")
	elif searchMethod == "ids":
		del fringe
		gc.collect()
		searchHelper(startNode, goalState, searchMethod, nodesPopped, nodesExpanded, nodesGenerated, maxFringeSize, limit+1, goalLocations, dumpFlag, file)
		
def expand(node, searchMethod, goalLocations):
	newNodes = []
	initialState = node.state
	row = node.position[0]
	col = node.position[1]

	# generating new nodes
	if row-1 >= 0:
		newState = list(map(list, initialState))
		newState[row-1][col] = 0
		newState[row][col] = initialState[row-1][col]		
		newNode = Node(newState, (row-1, col), (initialState[row-1][col], "Down"), node.g + initialState[row-1][col], node, node.depth + 1, 0)
		if searchMethod == "greedy" or searchMethod == "a*":
			heuristicValue = heuristic(newNode, searchMethod, goalLocations)
			newNode.f = heuristicValue
			if searchMethod == "a*":
				newNode.f += newNode.g
		newNodes.append(newNode)
	if col-1 >= 0:
		newState = list(map(list, initialState))
		newState[row][col-1] = 0
		newState[row][col] = initialState[row][col-1]
		newNode = Node(newState, (row, col-1), (initialState[row][col-1], "Right"), node.g + initialState[row][col-1], node, node.depth + 1, 0)
		if searchMethod == "greedy" or searchMethod == "a*":
			heuristicValue = heuristic(newNode, searchMethod, goalLocations)
			newNode.f = heuristicValue
			if searchMethod == "a*":
				newNode.f += newNode.g
		newNodes.append(newNode)
	if row+1 < len(node.state):
		newState = list(map(list, initialState))
		newState[row+1][col] = 0
		newState[row][col] = initialState[row+1][col]
		newNode = Node(newState, (row+1, col), (initialState[row+1][col], "Up"), node.g + initialState[row+1][col], node, node.depth + 1, 0)
		if searchMethod == "greedy" or searchMethod == "a*":
			heuristicValue = heuristic(newNode, searchMethod, goalLocations)
			newNode.f = heuristicValue
			if searchMethod == "a*":
				newNode.f += newNode.g
		newNodes.append(newNode)
	if col+1 < len(node.state[0]):
		newState = list(map(list, initialState))
		newState[row][col+1] = 0
		newState[row][col] = initialState[row][col+1]
		newNode = Node(newState, (row, col+1), (initialState[row][col+1], "Left"), node.g + initialState[row][col+1], node, node.depth + 1, 0)
		if searchMethod == "greedy" or searchMethod == "a*":
			heuristicValue = heuristic(newNode, searchMethod, goalLocations)
			newNode.f = heuristicValue
			if searchMethod == "a*":
				newNode.f += newNode.g
		newNodes.append(newNode)

	return newNodes
	
def main():
	startFile = sys.argv[1]
	goalFile = sys.argv[2]
	dumpFlag = False
	limit = 0
	method = "a*"
	if len(sys.argv) > 3:
		dumpFlag = sys.argv[3] == "true"
		if sys.argv[3] == "bfs" or sys.argv[3] == "ucs" or sys.argv[3] == "dfs" or sys.argv[3] == "dls" or sys.argv[3] == "ids" or sys.argv[3] == "greedy" or sys.argv[3] == "a*":
			method = sys.argv[3]
		
	if len(sys.argv) == 5:
		dumpFlag = sys.argv[4] == "true"
	f = None
	if dumpFlag:
		now = datetime.now()
		fileName = "trace-" + now.strftime("%mm%dd%Yy") + "-" + now.strftime("%Hh%Mm%Ss") + ".txt"
		f = open(fileName, "w")
		f.write("Command line arguments :\n")
		for argument in sys.argv[1:]:
			f.write("\t"+argument+"\n")
		f.write("Method selected: ")
		f.write(method+"\n")
		f.write("\n")

	startState = readstartFile(startFile)
	goalState = readstartFile(goalFile)
	search(startState, goalState, method, limit, dumpFlag, f)

if __name__ == "__main__":
	main()
